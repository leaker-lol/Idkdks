run(function()
	local ReachDisplay = {}
	local ReachLabel
	ReachDisplay = GuiLibrary.CreateLegitModule({
		Name = "Reach Display",
		Function = function(callback)
			if callback then
				task.spawn(function()
					repeat
						task.wait(0.4)
						ReachLabel.Text = store.attackReachUpdate > tick() and store.attackReach.." studs" or "0.00 studs"
					until (not ReachDisplay.Enabled)
				end)
			end
		end
	})
	ReachLabel = Instance.new("TextLabel")
	ReachLabel.Size = UDim2.new(0, 100, 0, 41)
	ReachLabel.BackgroundTransparency = 0.5
	ReachLabel.TextSize = 15
	ReachLabel.Font = Enum.Font.Gotham
	ReachLabel.Text = "0.00 studs"
	ReachLabel.TextColor3 = Color3.new(1, 1, 1)
	ReachLabel.BackgroundColor3 = Color3.new()
	ReachLabel.Parent = ReachDisplay.GetCustomChildren()
	local ReachCorner = Instance.new("UICorner")
	ReachCorner.CornerRadius = UDim.new(0, 4)
	ReachCorner.Parent = ReachLabel
end)

task.spawn(function()
	repeat task.wait() until shared.VapeFullyLoaded
	if not AutoLeave.Enabled then
		AutoLeave.ToggleButton(false)
	end
end)

run(function()
	local hasTeleported = false
	local TweenService = game:GetService("TweenService")

	function findNearestBed()
		local nearestBed = nil
		local minDistance = math.huge

		for _,v in pairs(game.Workspace:GetDescendants()) do
			if v.Name:lower() == "bed" and v:FindFirstChild("Covers") and v:FindFirstChild("Covers").BrickColor ~= lplr.Team.TeamColor then
				local distance = (v.Position - lplr.Character.HumanoidRootPart.Position).magnitude
				if distance < minDistance then
					nearestBed = v
					minDistance = distance
				end
			end
		end
		return nearestBed
	end
	function tweenToNearestBed()
		local nearestBed = findNearestBed()
		if nearestBed and not hasTeleported then
			hasTeleported = true

			local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)

			local tween = TweenService:Create(lplr.Character.HumanoidRootPart, TweenInfo.new(0.94), {CFrame = nearestBed.CFrame + Vector3.new(0, 2, 0)})
			tween:Play()
		end
	end
	BedTp = GuiLibrary.ObjectsThatCanBeSaved.WorldWindow.Api.CreateOptionsButton({
		Name = "BedTP",
		Function = function(callback)
			if callback then
				lplr.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
				lplr.CharacterAdded:Connect(function()
					wait(0.3) 
					tweenToNearestBed()
				end)
				hasTeleported = false
				BedTp["ToggleButton"](false)
			end
		end,
		["HoverText"] = "Nebulaware on topðŸ˜±"
	})
end)	
run(function()
	InfiniteJump = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
		Name = "InfiniteJump",
		Function = function(callback)
			if callback then

			end
		end
	})
	game:GetService("UserInputService").JumpRequest:Connect(function()
		if not InfiniteJump.Enabled then return end
		local localPlayer = game:GetService("Players").LocalPlayer
		local character = localPlayer.Character
		if character and character:FindFirstChildOfClass("Humanoid") then
			local humanoid = character:FindFirstChildOfClass("Humanoid")
			humanoid:ChangeState("Jumping")
		end
	end)         
end)


local Messages = {"Nebulaware is back", "This kill was easier than snapping a twig", "Better than render", "ðŸ”¥", "Best config", "Nebula was here", "999", "ðŸ’¯"}
local old
local FunnyIndicator = {Enabled = false}
FunnyIndicator = GuiLibrary.ObjectsThatCanBeSaved.RenderWindow.Api.CreateOptionsButton({
Name = "DamageIndicator",
Function = function(Callback)
	FunnyIndicator.Enabled = Callback
	if FunnyIndicator.Enabled then
		old = debug.getupvalue(bedwars.DamageIndicator, 10)["Create"]
		debug.setupvalue(bedwars.DamageIndicator, 10, {
			Create = function(self, obj, ...)
				spawn(function()
					pcall(function()
						obj.Parent.Text = Messages[math.random(1, #Messages)]
						obj.Parent.TextColor3 = Color3.fromHSV(tick() % 10 / 10, 2, 2)
					end)
				end)
				return game:GetService("TweenService"):Create(obj, ...)
			end
		})
	else
		debug.setupvalue(bedwars.DamageIndicator, 10, {
			Create = old
		})
		old = nil
	end
end
})






run(function()
	local hasTeleported = false
	local TweenService = game:GetService("TweenService")

	function findNearestPlayer()
		local nearestPlayer = nil
		local minDistance = math.huge

		for _,v in pairs(game.Players:GetPlayers()) do
			if v ~= lplr and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Team ~= lplr.Team and v.Character:FindFirstChild("Humanoid").Health > 0 then
				local distance = (v.Character.HumanoidRootPart.Position - lplr.Character.HumanoidRootPart.Position).magnitude
				if distance < minDistance then
					nearestPlayer = v
					minDistance = distance
				end
			end
		end
		return nearestPlayer
	end


	function tweenToNearestPlayer()
		local nearestPlayer = findNearestPlayer()
		if nearestPlayer and not hasTeleported then
			hasTeleported = true

			local tweenInfo = TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)

			local tween = TweenService:Create(lplr.Character.HumanoidRootPart, TweenInfo.new(0.64), {CFrame = nearestPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 2, 0)})
			tween:Play()
		end
	end

	PlayerTp = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
		Name = "PlayerTP",
		Function = function(callback)
			if callback then
				lplr.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
				lplr.CharacterAdded:Connect(function()
					wait(0.3)
					tweenToNearestPlayer()
				end)
				hasTeleported = false
				PlayerTp["ToggleButton"](false)
			end
		end,
		["HoverText"] = "Teleports you to the closest player that is not on your team (BETA)"
	})
end)

run(function()
    local coolpack = GuiLibrary.ObjectsThatCanBeSaved.RenderWindow.Api.CreateOptionsButton({
        Name = "TexturePack",
        HoverText = "yes",
        Function = function(callback)
            if callback then

				local Players = game:GetService("Players")
				local ReplicatedStorage = game:GetService("ReplicatedStorage")
				local Workspace = game:GetService("Workspace")
				local objs = game:GetObjects("rbxassetid://14654171957")
				local import = objs[1]
				import.Parent = ReplicatedStorage
				local index = {
					{
						name = "wood_sword",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Wood_Sword"),
					},	
					{
						name = "stone_sword",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Stone_Sword"),
					},
					{
						name = "iron_sword",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Iron_Sword"),
					},
					{
						name = "diamond_sword",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Diamond_Sword"),
					},
					{
						name = "rageblade",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Rageblade"),
					},
					{
						name = "emerald_sword",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-90)),
						model = import:WaitForChild("Emerald_Sword"),
					},
					{
						name = "wood_scythe",
						offset = CFrame.Angles(math.rad(0),math.rad(89),math.rad(-90)),
						model = import:WaitForChild("Wood_Scythe"),
					},
					{
						name = "stone_scythe",
						offset = CFrame.Angles(math.rad(0),math.rad(89),math.rad(-90)),
						model = import:WaitForChild("Stone_Scythe"),
					},
					{
						name = "iron_scythe",
						offset = CFrame.Angles(math.rad(0),math.rad(89),math.rad(-90)),
						model = import:WaitForChild("Iron_Scythe"),
					},
					{
						name = "diamond_scythe",
						offset = CFrame.Angles(math.rad(0),math.rad(89),math.rad(-90)),
						model = import:WaitForChild("Diamond_Scythe"),
					},
					{
						name = "wood_pickaxe",
						offset = CFrame.Angles(math.rad(0), math.rad(-10), math.rad(-95)),
						model = import:WaitForChild("Wood_Pickaxe"),
					},	
					{
						name = "stone_pickaxe",
						offset = CFrame.Angles(math.rad(0), math.rad(-10), math.rad(-95)),
						model = import:WaitForChild("Stone_Pickaxe"),
					},	
					{
						name = "iron_pickaxe",
						offset = CFrame.Angles(math.rad(0), math.rad(-10), math.rad(-95)),
						model = import:WaitForChild("Iron_Pickaxe"),
					},	
					{
						name = "diamond_pickaxe",
						offset = CFrame.Angles(math.rad(0), math.rad(-89), math.rad(-95)),
						model = import:WaitForChild("Diamond_Pickaxe"),
					},
					{
						name = "diamond",
						offset = CFrame.Angles(math.rad(0), math.rad(-90), math.rad(90)),
						model = import:WaitForChild("Diamond"),
					},
					{
						name = "iron",
						offset = CFrame.Angles(math.rad(0), math.rad(-90), math.rad(90)),
						model = import:WaitForChild("Iron"),
					},
					{
						name = "emerald",
						offset = CFrame.Angles(math.rad(0), math.rad(-90), math.rad(90)),
						model = import:WaitForChild("Emerald"),
					},
}
				local func = Workspace.Camera.Viewmodel.ChildAdded:Connect(function(tool)	
					if not tool:IsA("Accessory") then return end	
					for _, v in ipairs(index) do	
						if v.name == tool.Name then		
							for _, part in ipairs(tool:GetDescendants()) do
								if part:IsA("BasePart") or part:IsA("MeshPart") or part:IsA("UnionOperation") then				
									part.Transparency = 1
								end			
							end		
							local model = v.model:Clone()
							model.CFrame = tool:WaitForChild("Handle").CFrame * v.offset
							model.CFrame *= CFrame.Angles(math.rad(0), math.rad(-50), math.rad(0))
							model.Parent = tool			
							local weld = Instance.new("WeldConstraint", model)
							weld.Part0 = model
							weld.Part1 = tool:WaitForChild("Handle")			
							local tool2 = Players.LocalPlayer.Character:WaitForChild(tool.Name)			
							for _, part in ipairs(tool2:GetDescendants()) do
								if part:IsA("BasePart") or part:IsA("MeshPart") or part:IsA("UnionOperation") then				
									part.Transparency = 1				
								end			
							end			
							local model2 = v.model:Clone()
							model2.Anchored = false
							model2.CFrame = tool2:WaitForChild("Handle").CFrame * v.offset
							model2.CFrame *= CFrame.Angles(math.rad(0), math.rad(-50), math.rad(0))
							if v.name:match("rageblade") then
								model2.CFrame *= CFrame.new(0.7, 0, -1)                           
							elseif v.name:match("sword") or v.name:match("blade") then
								model2.CFrame *= CFrame.new(.6, 0, -1.1) - Vector3.new(0, 0, -.3)
							elseif v.name:match("axe") and not v.name:match("pickaxe") and v.name:match("diamond") then
								model2.CFrame *= CFrame.new(.08, 0, -1.1) - Vector3.new(0, 0, -1.1)
							elseif v.name:match("axe") and not v.name:match("pickaxe") and not v.name:match("diamond") then
								model2.CFrame *= CFrame.new(-.2, 0, -2.4) + Vector3.new(0, 0, 2.12)
							elseif v.name:match("scythe") then
								model2.CFrame *= CFrame.new(-1.15, 0.2, -2.1)
							elseif v.name:match("iron") then
								model2.CFrame *= CFrame.new(0, -.24, 0)
							elseif v.name:match("gold") then
								model2.CFrame *= CFrame.new(0, .03, 0)
							elseif v.name:match("diamond") then
								model2.CFrame *= CFrame.new(0, .027, 0)
							elseif v.name:match("emerald") then
								model2.CFrame *= CFrame.new(0, .001, 0)
							elseif v.name:match("telepearl") then
								model2.CFrame *= CFrame.new(.1, 0, .1)
							elseif v.name:match("bow") and not v.name:match("crossbow") then
								model2.CFrame *= CFrame.new(-.29, .1, -.2)
							elseif v.name:match("wood_crossbow") and not v.name:match("tactical_crossbow") then
								model2.CFrame *= CFrame.new(-.6, 0, 0)
							elseif v.name:match("tactical_crossbow") and not v.name:match("wood_crossbow") then
								model2.CFrame *= CFrame.new(-.5, 0, -1.2)
							else
								model2.CFrame *= CFrame.new(.2, 0, -.2)
							end
							model2.Parent = tool2
							local weld2 = Instance.new("WeldConstraint", model)
							weld2.Part0 = model2
							weld2.Part1 = tool2:WaitForChild("Handle")
						end
					end
				end)          
			end
        end
	})
end)



run(function()
    local TelepearlExploit = {Enabled = false}

	local function GetClosestPlayer()
		local ClosestPlayer = nil

		for i, v in pairs(game:GetService("Players"):GetChildren()) do
			if v.Team ~= lplr.Team and IsAlive(v) and IsAlive(lplr) then
				if v and v ~= lplr then
					local TargetDistance = lplr:DistanceFromCharacter(v.Character:FindFirstChild("HumanoidRootPart").CFrame.p)
					if TargetDistance < 9e9 then
						if not (v.Character.HumanoidRootPart.Velocity.Y < -10*5) then
							ClosestPlayer = v
						end
					end
				end
			end
		end

		return ClosestPlayer
	end

    TelepearlExploit = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
        Name = "Pearl TP",
        Function = function(callback)
            if callback then
				task.spawn(function()
					if IsAlive(lplr) and getItem("telepearl") then
						if GetClosestPlayer() ~= nil then
							switchItem(getItem("telepearl").tool)
							bedwars.ClientHandler:Get(bedwars.ProjectileRemote):CallServerAsync(getItem("telepearl").tool, "telepearl", "telepearl", GetClosestPlayer().Character.HumanoidRootPart.Position - Vector3.new(0,4,0), GetClosestPlayer().Character.HumanoidRootPart.Position - Vector3.new(0,4,0), GetClosestPlayer().Character.HumanoidRootPart.Position, game:GetService("HttpService"):GenerateGUID(), {["drawDurationSeconds"] = 1})
							
							task.spawn(function()
								task.wait(0.16)
								if lplr.Character.HandInvItem.Value ~= getItem("telepearl").tool then
									warningNotification("Pearl TP", "Failed to find telepearl", 3)
								end
							end)
					    else
							warningNotification("Pearl TP", "Failed to find player", 3)
						end
					else
						warningNotification("Pearl TP", "Telepearl required", 3)
					end
				end)

				TelepearlExploit.ToggleButton(false)
            end
        end
    })
end)

run(function()
    local AutoSkywars = {Enabled = false}
    AutoSkywars = GuiLibrary.ObjectsThatCanBeSaved.RenderWindow.Api.CreateOptionsButton({
        Name = "AutoSkywars",
        Function = function(callback)
            if callback then
				task.spawn(function()
					if bedwarsStore.queueType:find("skywars") then
						if bedwarsStore.matchState ~= 0 then return end
						repeat task.wait() until bedwarsStore.matchState ~= 0
						if (not AutoSkywars.Enabled) then return end
						task.wait(0.1)
						local tween = tweenService:Create(lplr.Character.HumanoidRootPart, TweenInfo.new(0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {CFrame = workspace.SpectatorPlatform.floor.CFrame - Vector3.new(0,1.5,5)})
						tween:Play()
						tween.Completed:Wait()
						task.wait(0.5)
						workspace.SpectatorPlatform.floor.CanCollide = false
					end
				end)
            end
        end
    })
end)

run(function()
	local DamageExploit = {Enabled = false}
	local damagetick = tick()
	DamageExploit = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
		["Name"] = "DamageExploit",
		["Function"] = function(callback)
			if callback then 
				task.spawn(function()
					table.insert(DamageExploit.Connections, vapeEvents.EntityDamageEvent.Event:Connect(function(damageTable)
						if damageTable.entityInstance == lplr.Character and (damageTable.damageType ~= 0 or damageTable.extra and damageTable.extra.chargeRatio ~= nil) and (not (damageTable.knockbackMultiplier and damageTable.knockbackMultiplier.disabled or damageTable.knockbackMultiplier and damageTable.knockbackMultiplier.horizontal == 0)) then 
							damagetick = tick() + 5 / 5
						end
					end))

					RunLoops:BindToHeartbeat("DamageExploit", function(delta)
						if damagetick > tick() then
							if longjumping == true then return end
							damagethingy = true
							if GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"].Api.Enabled then
								if bedwarsStore.matchState == 0 then return end
							end

							if entityLibrary.isAlive then
								if not isnetworkowner(entityLibrary.character.HumanoidRootPart) and (not GuiLibrary.ObjectsThatCanBeSaved.InfiniteFlyOptionsButton.Api.Enabled) and (not GuiLibrary.ObjectsThatCanBeSaved.FlyOptionsButton.Api.Enabled) and (not GuiLibrary.ObjectsThatCanBeSaved.LongJumpOptionsButton.Api.Enabled) then return end
								if GuiLibrary.ObjectsThatCanBeSaved.GrappleExploitOptionsButton and GuiLibrary.ObjectsThatCanBeSaved.GrappleExploitOptionsButton.Api.Enabled then return end
								for i, v in pairs(entityLibrary.character.Humanoid:GetPlayingAnimationTracks()) do
									if v.Name == "WalkAnim" or v.Name == "RunAnim" then
										v:AdjustSpeed(10 / 12)
									end
								end

								local speedValue = getSpeed()

								local speedVelocity = entityLibrary.character.Humanoid.MoveDirection * (22 or speedValue)
								entityLibrary.character.HumanoidRootPart.Velocity = Vector3.new(speedVelocity.X, entityLibrary.character.HumanoidRootPart.Velocity.Y, speedVelocity.Z)
								local speedCFrame = entityLibrary.character.Humanoid.MoveDirection * (40 - 20) * delta

								RaycastParams.new().FilterDescendantsInstances = {lplr.Character}
								local ray = workspace:Raycast(entityLibrary.character.HumanoidRootPart.Position, speedCFrame, RaycastParams.new())

								if ray then
									speedCFrame = (ray.Position - entityLibrary.character.HumanoidRootPart.Position)
								end

								entityLibrary.character.HumanoidRootPart.CFrame = entityLibrary.character.HumanoidRootPart.CFrame + speedCFrame
							else
								damagethingy = false
							end
						end
					end)
				end)
			else
				RunLoops:UnbindFromHeartbeat("DamageExploit")
			end
		end
	})
end)


run(function()
    local GodMode = {Enabled = false}
    GodMode = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
        Name = "Godmode",
        Function = function(callback)
            if callback then
				spawn(function()
					while task.wait() do
						if (not GodMode.Enabled) then return end
						if (not GuiLibrary.ObjectsThatCanBeSaved.FlyOptionsButton.Api.Enabled) and (not GuiLibrary.ObjectsThatCanBeSaved.InfiniteFlyOptionsButton.Api.Enabled) then
							for i, v in pairs(game:GetService("Players"):GetChildren()) do
								if v.Team ~= lplr.Team and IsAlive(v) and IsAlive(lplr) then
									if v and v ~= lplr then
										local TargetDistance = lplr:DistanceFromCharacter(v.Character:FindFirstChild("HumanoidRootPart").CFrame.p)
										if TargetDistance < 25 then
											if not lplr.Character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") then
												repeat task.wait() until bedwarsStore.matchState ~= 0
												if not (v.Character.HumanoidRootPart.Velocity.Y < -10*5) then
													lplr.Character.Archivable = true
			
													local Clone = lplr.Character:Clone()
													Clone.Parent = workspace
													Clone.Head:ClearAllChildren()
													gameCamera.CameraSubject = Clone:FindFirstChild("Humanoid")
				
													for i,v in pairs(Clone:GetChildren()) do
														if string.lower(v.ClassName):find("part") and v.Name ~= "HumanoidRootPart" then
															v.Transparency = 1
														end
														if v:IsA("Accessory") then
															v:FindFirstChild("Handle").Transparency = 1
														end
													end
				
													lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + Vector3.new(0,100000,0)
				
													game:GetService("RunService").RenderStepped:Connect(function()
														if Clone ~= nil and Clone:FindFirstChild("HumanoidRootPart") then
															Clone.HumanoidRootPart.Position = Vector3.new(lplr.Character.HumanoidRootPart.Position.X, Clone.HumanoidRootPart.Position.Y, lplr.Character.HumanoidRootPart.Position.Z)
														end
													end)
				
													task.wait(0.3)
													lplr.Character.HumanoidRootPart.Velocity = Vector3.new(lplr.Character.HumanoidRootPart.Velocity.X, -1, lplr.Character.HumanoidRootPart.Velocity.Z)
													lplr.Character.HumanoidRootPart.CFrame = Clone.HumanoidRootPart.CFrame
													gameCamera.CameraSubject = lplr.Character:FindFirstChild("Humanoid")
													Clone:Destroy()
													task.wait(0.15)
												end
											end
										end
									end
								end
							end
						end
					end
				end)
			end
        end
    })
end)

)
